apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: organization-namespace-protection
spec:
  steps:
    # Step 1: Create basic namespaces and other organizations
    - try:
        - apply:
            resource:
              apiVersion: resourcemanager.miloapis.com/v1alpha1
              kind: Organization
              metadata:
                name: contoso
              spec:
                type: Standard
        - apply:
            resource:
              apiVersion: iam.miloapis.com/v1alpha1
              kind: User
              metadata:
                name: regular-user
              spec:
                email: regular@example.com
                givenName: Regular
                familyName: User
        - apply:
            resource:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: organization-acme
        - apply:
            resource:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: organization-contoso

    # Step 2: Create resources for testing with dynamic UIDs
    - try:
        - create:
            file: test-org.yaml
            outputs:
              - name: org
                value: (@)
        - create:
            file: test-user.yaml
            outputs:
              - name: user
                value: (@)
        - create:
            file: test-role.yaml
            outputs:
              - name: role
                value: (@)
        - wait:
            apiVersion: iam.miloapis.com/v1alpha1
            kind: Role
            name: test-group-admin
            timeout: 5m
            for:
              condition:
                name: Ready
                value: "true"
        - apply:
            resource:
              apiVersion: iam.miloapis.com/v1alpha1
              kind: PolicyBinding
              metadata:
                name: test-acme-admin-binding
              spec:
                subjects:
                  - kind: User
                    name: test-acme-admin
                    uid: ($user.metadata.uid)
                roleRef:
                  name: test-group-admin
                  namespace: ($namespace)
                resourceSelector:
                  resourceRef:
                    apiGroup: resourcemanager.miloapis.com
                    kind: Organization
                    name: test-acme-org
                    uid: ($org.metadata.uid)
        - wait:
            apiVersion: iam.miloapis.com/v1alpha1
            kind: PolicyBinding
            name: test-acme-admin-binding
            timeout: 5m
            for:
              condition:
                name: Ready
                value: "true"

    # Step 3: Test allowed access - correct namespace
    - try:
        - create:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                name: test-org-namespace-allowed
                namespace: default
              spec:
                restartPolicy: Never
                containers:
                  - name: curl
                    image: curlimages/curl:latest
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        response=$(curl -ksS https://auth-provider-openfga-authz-webhook.auth-provider-openfga-system.svc.cluster.local:8090/apis/authorization.k8s.io/v1/subjectaccessreviews \
                          -H "Content-Type: application/json" \
                          -d @- << EOF
                        {
                          "apiVersion": "authorization.k8s.io/v1",
                          "kind": "SubjectAccessReview",
                          "spec": {
                            "user": "test-acme-admin",
                            "uid": "test-acme-admin",
                            "extra": {
                              "iam.miloapis.com/parent-api-group": ["resourcemanager.miloapis.com"],
                              "iam.miloapis.com/parent-kind": ["Organization"],
                              "iam.miloapis.com/parent-name": ["test-acme-org"]
                            },
                            "groups": ["system:authenticated"],
                            "resourceAttributes": {
                              "namespace": "organization-acme",
                              "group": "iam.miloapis.com",
                              "resource": "groups",
                              "version": "v1alpha1",
                              "verb": "list"
                            }
                          }
                        }
                        EOF
                        )
                        echo "Webhook response: $response"
                        # Check if we got a valid SubjectAccessReview response
                        if ! echo "$response" | grep -q '"kind":"SubjectAccessReview"'; then
                          echo "Test failed - invalid response format"
                          exit 1
                        fi
                        # Check if the request was allowed
                        if echo "$response" | grep -q '"allowed"[[:space:]]*:[[:space:]]*true'; then
                          echo "Test passed - access allowed with correct namespace"
                          exit 0
                        else
                          echo "Test failed - access denied with correct namespace"
                          echo "Response: $response"
                          exit 1
                        fi
        - wait:
            apiVersion: v1
            kind: Pod
            name: test-org-namespace-allowed
            namespace: default
            timeout: 1m
            for:
              condition:
                name: Complete
                value: "true"

    # Step 4: Test denied access - wrong namespace
    - try:
        - create:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                name: test-org-namespace-denied
                namespace: default
              spec:
                restartPolicy: Never
                containers:
                  - name: curl
                    image: curlimages/curl:latest
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        response=$(curl -ksS https://auth-provider-openfga-authz-webhook.auth-provider-openfga-system.svc.cluster.local:8090/apis/authorization.k8s.io/v1/subjectaccessreviews \
                          -H "Content-Type: application/json" \
                          -d @- << EOF
                        {
                          "apiVersion": "authorization.k8s.io/v1",
                          "kind": "SubjectAccessReview",
                          "spec": {
                            "user": "test-acme-admin",
                            "uid": "test-acme-admin",
                            "extra": {
                              "iam.miloapis.com/parent-api-group": ["resourcemanager.miloapis.com"],
                              "iam.miloapis.com/parent-kind": ["Organization"],
                              "iam.miloapis.com/parent-name": ["test-acme-org"]
                            },
                            "groups": ["system:authenticated"],
                            "resourceAttributes": {
                              "namespace": "organization-contoso",
                              "group": "iam.miloapis.com",
                              "resource": "groups",
                              "version": "v1alpha1",
                              "verb": "list"
                            }
                          }
                        }
                        EOF
                        )
                        echo "Webhook response: $response"
                        # Check if we got a valid SubjectAccessReview response
                        if ! echo "$response" | grep -q '"kind":"SubjectAccessReview"'; then
                          echo "Test failed - invalid response format"
                          exit 1
                        fi
                        # Check if the request was denied with evaluation error
                        if echo "$response" | grep -q '"evaluationError".*namespace mismatch'; then
                          echo "Test passed - access denied with namespace mismatch error"
                          exit 0
                        elif echo "$response" | grep -q '"allowed"[[:space:]]*:[[:space:]]*false'; then
                          echo "Test passed - access denied (but without expected error message)"
                          exit 0
                        else
                          echo "Test failed - access was not denied for wrong namespace"
                          echo "Response: $response"
                          exit 1
                        fi
        - wait:
            apiVersion: v1
            kind: Pod
            name: test-org-namespace-denied
            namespace: default
            timeout: 1m
            for:
              condition:
                name: Complete
                value: "true"

    # Step 5: Test non-organization request - no namespace validation
    - try:
        - create:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                name: test-no-org-context
                namespace: default
              spec:
                restartPolicy: Never
                containers:
                  - name: curl
                    image: curlimages/curl:latest
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        response=$(curl -ksS https://auth-provider-openfga-authz-webhook.auth-provider-openfga-system.svc.cluster.local:8090/apis/authorization.k8s.io/v1/subjectaccessreviews \
                          -H "Content-Type: application/json" \
                          -d @- << EOF
                        {
                          "apiVersion": "authorization.k8s.io/v1",
                          "kind": "SubjectAccessReview",
                          "spec": {
                            "user": "regular-user",
                            "uid": "regular-user",
                            "groups": ["system:authenticated"],
                            "resourceAttributes": {
                              "namespace": "organization-contoso",
                              "group": "iam.miloapis.com",
                              "resource": "groups",
                              "version": "v1alpha1",
                              "verb": "list"
                            }
                          }
                        }
                        EOF
                        )
                        echo "Webhook response: $response"
                        # Check if we got a valid SubjectAccessReview response
                        if ! echo "$response" | grep -q '"kind":"SubjectAccessReview"'; then
                          echo "Test failed - invalid response format"
                          exit 1
                        fi
                        # For non-org context, there should be no namespace validation error
                        if echo "$response" | grep -q '"evaluationError".*namespace mismatch'; then
                          echo "Test failed - namespace validation applied to non-org request"
                          exit 1
                        else
                          echo "Test passed - no namespace validation for non-org request"
                          exit 0
                        fi
        - wait:
            apiVersion: v1
            kind: Pod
            name: test-no-org-context
            namespace: default
            timeout: 1m
            for:
              condition:
                name: Complete
                value: "true"