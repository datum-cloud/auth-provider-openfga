name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image-meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: image-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=ref,event=pr,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}}
            type=ref,event=branch
            type=ref,event=branch,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.image-meta.outputs.tags }}
          labels: ${{ steps.image-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-kustomize-bundles:
    permissions:
      id-token: write
      contents: read
      packages: write
    uses: datum-cloud/actions/.github/workflows/publish-kustomize-bundle.yaml@v1.5.2
    with:
      bundle-name: ghcr.io/datum-cloud/auth-provider-openfga-kustomize
      bundle-path: config
    secrets: inherit

  test-e2e:
    name: End-to-end testing
    runs-on: ubuntu-latest
    needs: [build, publish-kustomize-bundles]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare local alias tag
        run: |
          TAG=$(echo '${{ needs.build.outputs.image }}' | head -n1)
          docker pull "$TAG"
          docker tag "$TAG" auth-provider-openfga:test

      - name: Bootstrap KIND test cluster
        uses: datum-cloud/test-infra/.github/actions/kind-bootstrap@v0.1
        with:
          cluster_name: auth-provider-openfga         # optional override
          wait_timeout: "300s"                         # optional override
          images: |
            ${{ needs.build.outputs.image }}          
            auth-provider-openfga:test               

      - name: Deploy application dependencies via Flux
        run: |
          echo "🔧 Deploying application dependencies (OpenFGA) via Flux..."
          make kustomize
          kubectl apply --server-side --wait=true -f <(bin/kustomize build config/dependencies)
          echo "⏳ Waiting for dependency HelmReleases to be ready..."
          kubectl wait --for=condition=Ready helmrelease/openfga -n openfga-system --timeout=240s
          echo "✅ Application dependencies deployed successfully"

      - name: Create FluxCD OCIRepository
        run: |
          # Use the first tag from the published bundle (exact same tags that were published)
          echo "All published tags:"
          echo "${{ needs.publish-kustomize-bundles.outputs.tags }}"

          # Validate that we received tags from the publish job
          if [ -z "${{ needs.publish-kustomize-bundles.outputs.tags }}" ]; then
            echo "ERROR: No tags received from publish-kustomize-bundles job"
            exit 1
          fi

          OCI_TAG=$(echo "${{ needs.publish-kustomize-bundles.outputs.tags }}" | head -n1 | cut -d: -f2)
          echo "Selected OCI bundle tag: ${OCI_TAG}"

          # Validate that we extracted a valid tag
          if [ -z "${OCI_TAG}" ]; then
            echo "ERROR: Failed to extract OCI tag from published tags"
            exit 1
          fi

          cat <<EOF | kubectl apply -f -
          apiVersion: source.toolkit.fluxcd.io/v1beta2
          kind: OCIRepository
          metadata:
            name: auth-provider-openfga-source
            namespace: flux-system
          spec:
            interval: 30s
            url: oci://ghcr.io/datum-cloud/auth-provider-openfga-kustomize
            ref:
              tag: ${OCI_TAG}
          EOF

          # Wait for OCIRepository to be ready
          kubectl wait --for=condition=Ready ocirepository/auth-provider-openfga-source -n flux-system --timeout=180s

      - name: Create FluxCD Kustomization for deployment
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: kustomize.toolkit.fluxcd.io/v1
          kind: Kustomization
          metadata:
            name: auth-provider-openfga
            namespace: flux-system
          spec:
            interval: 1m
            path: "./environments/testing"
            prune: true
            sourceRef:
              kind: OCIRepository
              name: auth-provider-openfga-source
            timeout: 15m
            wait: true
            images:
              - name: auth-provider-openfga
                newName: auth-provider-openfga
                newTag: test
            healthChecks:
              # Cert-manager components (already deployed via bootstrap)
              - apiVersion: apps/v1
                kind: Deployment
                name: cert-manager
                namespace: cert-manager
              - apiVersion: apps/v1
                kind: Deployment
                name: cert-manager-webhook
                namespace: cert-manager
              - apiVersion: apps/v1
                kind: Deployment
                name: cert-manager-cainjector
                namespace: cert-manager
              # Certificates and ClusterIssuers
              - apiVersion: cert-manager.io/v1
                kind: Certificate
                name: auth-provider-openfga-auth-provider-openfga-ca-cert
                namespace: cert-manager
              - apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                name: auth-provider-openfga-selfsigned-cluster-issuer
              - apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                name: auth-provider-openfga-auth-provider-openfga-ca-cluster-issuer
              # Application components
              - apiVersion: apps/v1
                kind: Deployment
                name: auth-provider-openfga-controller-manager
                namespace: auth-provider-openfga-system
              - apiVersion: apps/v1
                kind: Deployment
                name: auth-provider-openfga-authz-webhook
                namespace: auth-provider-openfga-system
              # OpenFGA (already deployed via bootstrap)
              - apiVersion: apps/v1
                kind: Deployment
                name: openfga
                namespace: openfga-system
          EOF

      - name: Wait for FluxCD Kustomization to deploy and verify all components
        run: |
          echo "Waiting for FluxCD Kustomization to be ready (this includes all health checks)..."
          kubectl wait --for=condition=Ready kustomization/auth-provider-openfga -n flux-system --timeout=600s
          echo "All components are ready and healthy via FluxCD health checks!"

      - name: Install chainsaw and run tests
        run: |
          make chainsaw
          echo "Running chainsaw tests against the deployed system..."
          bin/chainsaw test test/

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Cluster Information ==="
          kubectl cluster-info
          echo "=== All Pods ==="
          kubectl get pods --all-namespaces
          echo "=== FluxCD Status ==="
          bin/flux get all
          echo "=== Kustomization Status ==="
          kubectl describe kustomization auth-provider-openfga -n flux-system
          echo "=== OCIRepository Status ==="
          kubectl describe ocirepository auth-provider-openfga-source -n flux-system
          echo "=== HelmRelease Status ==="
          kubectl describe helmrelease cert-manager -n cert-manager
          kubectl describe helmrelease cert-manager-csi-driver -n cert-manager
          kubectl describe helmrelease openfga -n openfga-system
          echo "=== Events ==="
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
          echo "=== Built Image Info ==="
          echo "Image from build job: ${{ needs.build.outputs.image }}"
          echo "Image digest: ${{ needs.build.outputs.digest }}"
          echo "=== Published Bundle Info ==="
          echo "Bundle tags: ${{ needs.publish-kustomize-bundles.outputs.tags }}"
          echo "Bundle digest: ${{ needs.publish-kustomize-bundles.outputs.digest }}"
          echo "Bundle labels: ${{ needs.publish-kustomize-bundles.outputs.labels }}"
          echo "=== Logs from failing pods ==="
          for ns in auth-provider-openfga-system openfga-system cert-manager flux-system; do
            echo "--- Namespace: $ns ---"
            kubectl get pods -n $ns --field-selector=status.phase!=Running | tail -n +2 | while read pod rest; do
              if [ -n "$pod" ]; then
                echo "Logs for $pod in $ns:"
                kubectl logs $pod -n $ns --tail=50
              fi
            done
          done
